/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StroreRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HealthcareCenter.HealthCareCenterEnterprise;
import Business.Network.Network;
import Business.Organization.Community.FamilyOrganization;
import Business.Organization.Community.StoreOrganization;
import Business.Organization.HealthCare.ResearchOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FamilyHealthWorkRequest;
import Business.WorkQueue.StoreHealthWorkRequest;
import Refrigerator.Product;
import Refrigerator.ProductDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lenovo
 */
public class StoreRefrigeratorJPanel extends javax.swing.JPanel {

    private StoreOrganization organization;
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;

    /**
     * Creates new form StoreWorkAreaJPanel
     */
    StoreRefrigeratorJPanel(JPanel userProcessContainer, Enterprise enterprise,
            StoreOrganization organization, UserAccount account, EcoSystem business) {
        initComponents();
        this.organization = organization;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;

        populateTable();

    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) storeRefJTbl.getModel();

        model.setRowCount(0);

        for (Product prpudct : organization.getStoreRefrigerator().getProductDirectory().getProductList()) {
            Object[] row = new Object[4];
            row[0] = prpudct;
            row[1] = prpudct.getStock();
            row[2] = prpudct.getPrice();
            row[3] = prpudct.getExpirationDate();

            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        storeRefJTbl = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        removeProductButton = new javax.swing.JButton();
        seeNotification = new javax.swing.JButton();
        sendInfo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        resetConsumedProductJBtn = new javax.swing.JButton();

        setLayout(null);

        storeRefJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item", "Stock", "Price", "Expiration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(storeRefJTbl);
        if (storeRefJTbl.getColumnModel().getColumnCount() > 0) {
            storeRefJTbl.getColumnModel().getColumn(0).setResizable(false);
            storeRefJTbl.getColumnModel().getColumn(1).setResizable(false);
            storeRefJTbl.getColumnModel().getColumn(2).setResizable(false);
            storeRefJTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(11, 130, 570, 90);

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/StroreRole/back-icon.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton);
        backButton.setBounds(10, 460, 91, 41);

        removeProductButton.setText("Pick");
        removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProductButtonActionPerformed(evt);
            }
        });
        add(removeProductButton);
        removeProductButton.setBounds(122, 252, 90, 30);

        seeNotification.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/StroreRole/Windows-Magnifier-icon.png"))); // NOI18N
        seeNotification.setText("See Notifications");
        seeNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeNotificationActionPerformed(evt);
            }
        });
        add(seeNotification);
        seeNotification.setBounds(83, 293, 140, 25);

        sendInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/StroreRole/ok-icon (1).png"))); // NOI18N
        sendInfo.setText("Send Information To Health Care Center");
        sendInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendInfoActionPerformed(evt);
            }
        });
        add(sendInfo);
        sendInfo.setBounds(66, 334, 247, 25);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/StroreRole/roban.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(-40, 0, 360, 80);

        resetConsumedProductJBtn.setText("Reset Consumed Product");
        resetConsumedProductJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetConsumedProductJBtnActionPerformed(evt);
            }
        });
        add(resetConsumedProductJBtn);
        resetConsumedProductJBtn.setBounds(280, 290, 160, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_backButtonActionPerformed

    private void seeNotificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeNotificationActionPerformed
        NotificationJP panel = new NotificationJP(userProcessContainer, enterprise,
                organization, userAccount, business);

        userProcessContainer.add("Notification", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

        // TODO add your handling code here:
    }//GEN-LAST:event_seeNotificationActionPerformed

    private void sendInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendInfoActionPerformed
        // TODO add your handling code here:
        StoreHealthWorkRequest request = new StoreHealthWorkRequest();

        request.setSender(userAccount);
        request.setStatus("InComplete");
        request.setProductDirectory(organization.getStoreRefrigerator().getConsumedProduct());

        Organization org = null;

        for (Network net : business.getNetworkList()) {
            for (Enterprise enterprise : net.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HealthCareCenterEnterprise) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof ResearchOrganization) {
                            org = organization;
                            break;
                        }
                    }
                }

            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }

        JOptionPane.showMessageDialog(null, "Information has been sent to health care center. ", "Informaton", JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_sendInfoActionPerformed

    private void removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProductButtonActionPerformed
        // TODO add your handling code here:

        int row = storeRefJTbl.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Product p = (Product) storeRefJTbl.getValueAt(row, 0);
        int aviliNam = p.getStock();
        int conNumber = p.getConsumedNumber();
        p.setConsumedNumber(++conNumber);
        p.setStock(--aviliNam);
        populateTable();
        Product consumedp = organization.getStoreRefrigerator().getConsumedProduct().searchProduct(p.getName());
        if (consumedp == null) {
            organization.getStoreRefrigerator().getConsumedProduct().addConsumedProduct(p);
        } else {
            organization.getStoreRefrigerator().getConsumedProduct().removeProduct(consumedp);
            organization.getStoreRefrigerator().getConsumedProduct().addConsumedProduct(p);
        }

        if (p.getStock() == 0) {
            organization.getStoreRefrigerator().getProductDirectory().removeProduct(p);
            populateTable();
            JOptionPane.showMessageDialog(null, "You run out of :( " + p.getName() + " ) \n The notification has been sent to Supplier ", "Information", JOptionPane.INFORMATION_MESSAGE);

        } else {
            return;
        }

    }//GEN-LAST:event_removeProductButtonActionPerformed

    private void resetConsumedProductJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetConsumedProductJBtnActionPerformed
        // TODO add your handling code here:
        for (Product p: organization.getStoreRefrigerator().getConsumedProduct().getProductList())
        {
            organization.getStoreRefrigerator().getConsumedProduct().removeProduct(p);
        }
    }//GEN-LAST:event_resetConsumedProductJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeProductButton;
    private javax.swing.JButton resetConsumedProductJBtn;
    private javax.swing.JButton seeNotification;
    private javax.swing.JButton sendInfo;
    private javax.swing.JTable storeRefJTbl;
    // End of variables declaration//GEN-END:variables
}
