/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.LabAssistantRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.HealthCare.LabOrganization;
import Business.Organization.Organization;
import Business.Organization.HealthCare.DataBaseAdministrative;
import Business.Organization.HealthCare.ResearchOrganization;
import Business.Results.ResultsDir;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DataBaseWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.ResearchWorkRequest;
import Business.WorkQueue.WorkRequest;
import Refrigerator.ConsumedProudcts;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class LabAssistantWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ResultsDir resultsDir;
    private EcoSystem business;
    private UserAccount userAccount;
    private UserAccount senderName;
    private LabOrganization labOrganization;
    private Enterprise enterprise;
    private ConsumedProudcts consumedProudcts;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public LabAssistantWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.labOrganization = (LabOrganization) organization;
        this.enterprise = enterprise;

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : labOrganization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            row[0] = request.getMessage();
            row[1] = request;

            row[2] = request.getStatus();
            row[3] = request.getResult();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        requestInformationBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(null);

        workRequestJTable.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Status", "Result "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 90, 520, 90);

        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton);
        assignJButton.setBounds(150, 220, 170, 25);

        processJButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton);
        processJButton.setBounds(150, 280, 170, 25);

        requestInformationBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        requestInformationBtn.setText("Request Information");
        requestInformationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestInformationBtnActionPerformed(evt);
            }
        });
        add(requestInformationBtn);
        requestInformationBtn.setBounds(150, 250, 170, 25);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/LabAssistantRole/lab and research.jpg"))); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(0, -10, 580, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 1);

        request.setStatus("Pending");
        populateTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(row, 1);

        consumedProudcts = request.getProductDirectory();
       // senderName = request.getSender();

       // senderName.setUsername(request.getFamilyID());
       
        resultsDir = labOrganization.setParameters(consumedProudcts, request.getResult(),request.getFamilyID());
        

        ResearchWorkRequest req = new ResearchWorkRequest();
        req.setStatus("Complete");
        req.setFamilyID(request.getFamilyID());
        req.setResult(request.getResult());
        req.setSender(userAccount);
        req.setProductDirectory(consumedProudcts);
        req.setResultsDir(resultsDir);

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof ResearchOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(req);
          //  userAccount.getWorkQueue().getWorkRequestList().add(req);
        }
        JOptionPane.showMessageDialog(null, "The result has been sent to Research Orgnaization..", "Information", JOptionPane.WARNING_MESSAGE);
        //labOrganization.getWorkQueue().removeWorkRequest(request);
    }//GEN-LAST:event_processJButtonActionPerformed

    private void requestInformationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestInformationBtnActionPerformed

        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            WorkRequest req = (WorkRequest) workRequestJTable.getValueAt(row, 1);
            if (req.getStatus().equals("Pending")) {

                consumedProudcts = req.getProductDirectory();
                DataBaseWorkRequest request = new DataBaseWorkRequest();
                request.setFamilyID(req.getFamilyID());
                request.setMessage("for DATA");
                request.setSender(userAccount);
                request.setStatus("Process");
                request.setProductDirectory(consumedProudcts);

                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof DataBaseAdministrative) {
                        org = organization;

                        break;
                    }
                }
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                 //   userAccount.getWorkQueue().getWorkRequestList().add(request);
                }

                JOptionPane.showMessageDialog(null, " Request has been sent to DataBase Administrative ", "Informaton", JOptionPane.INFORMATION_MESSAGE);
//labOrganization.getWorkQueue().removeWorkRequest(req);
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "The Request did not assigned!!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_requestInformationBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton requestInformationBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
